<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hongbin.Common</name>
    </assembly>
    <members>
        <member name="M:System.BdpSystemExtension.SubStr(System.String,System.Int32,System.Int32)">
            <summary>
            避免Substring触发“索引和长度必须引用该字符串内的位置。”异常
            </summary>
        </member>
        <member name="M:Hongbin.Common.Compression.Compress(System.String)">
            <summary>  
            对字符串进行压缩  
            </summary>  
            <param name="str">待压缩的字符串</param>  
            <returns>压缩后的字符串</returns>  
        </member>
        <member name="M:Hongbin.Common.Compression.UnCompress(System.String)">
            <summary>  
            对字符串进行解压缩  
            </summary>  
            <param name="str">待解压缩的字符串</param>  
            <returns>解压缩后的字符串</returns>  
        </member>
        <member name="M:Hongbin.Common.Compression.CompressFile(System.String,System.String)">
            <summary>  
            对文件进行压缩  
            </summary>  
            <param name="sourceFile">待压缩的文件名</param>  
            <param name="destinationFile">压缩后的文件名</param>  
        </member>
        <member name="M:Hongbin.Common.Compression.DecompressFile(System.String,System.String)">
            <summary>  
            对文件进行解压缩  
            </summary>  
            <param name="sourceFile">待解压缩的文件名</param>  
            <param name="destinationFile">解压缩后的文件名</param>  
            <returns></returns>  
        </member>
        <member name="M:Hongbin.Common.Compression.Compress(System.Byte[])">
            <summary>  
            对byte数组进行压缩  
            </summary>  
            <param name="data">待压缩的byte数组</param>  
            <returns>压缩后的byte数组</returns>  
        </member>
        <member name="T:Hongbin.Common.Consts">
            <summary>
            在系统中用到的常量应该尽可能地放到这个静态类中
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnBdpVersion">
            <summary>
            BDP平台版本号
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnCompanyId">
            <summary>
            公司ID
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnDepartmentId">
            <summary>
            部门ID
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnUserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnUserName">
            <summary>
            当前登录用户名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnLoginValidationItems">
            <summary>
            用户登录时的验证项目，表示用户登录时应检查用户表中的哪些字段，
            比如该若为:"UserName,UserCode,RealName"，登录时输入了A001，表示
            只要帐户名、用户代码、真实姓名3个字段中的任何一个的值等于A001，就视为合法用户。
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnUserHostName">
            <summary>
            用户主机名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnUserHostAddress">
            <summary>
            用户主机地址
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnRequestUrl">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.gvnSuperUserName">
            <summary>
            系统超级用户
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.InnerCompanyId">
            <summary>
            实体（记录）生成者所属公司ID
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.InnerCreatorId">
            <summary>
            实体（记录）生成者ID，当前用户标识
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.InnerCreateTime">
            <summary>
            实体（记录）生成时间
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.InnerDeleteFlag">
            <summary>
            实体（记录）删除标记
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.InnerCode">
            <summary>
            实体（记录）内部编码
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnPortalUserId">
            <summary>
            地址中门户用户标识参数名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnToken">
            <summary>
            地址中令牌参数名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnRedirectUrl">
            <summary>
            地址中重定向地址串的参数名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnClientId">
            <summary>
            地址中子系统ID参数名
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnExpStartSign">
            <summary>
            文本中标志表达式块开始
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnExpEndSign">
            <summary>
            文本中标志表达式块结束
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnMsgPermissionPageId">
            <summary>
            消息权限存储时虚拟的页面标识
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cpResult">
            <summary>
            回传中回传结果名字
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.cnStartModuleNode">
            <summary>
            模块装配方案名称，装配模块时在模块表中查找的起始节点。
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.TreeRootParentFlags">
            <summary>
            标志是树的根节点的可能值集合
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.ERR_NonLogin">
            <summary>
            没有登录信息
            </summary>
        </member>
        <member name="F:Hongbin.Common.Consts.ERR_ForceLogout">
            <summary>
            强制下线
            </summary>
        </member>
        <member name="T:Hongbin.Common.DictionaryExtension">
            <summary>
            字典类扩展
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            获取字符串值，没有返回缺省值
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetBoolean(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            获取逻辑值，没有返回缺省值
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetInt(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Int32)">
            <summary>
            获取整数值，没有返回缺省值
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetDecimal(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Decimal)">
            <summary>
            获取浮点值，没有返回缺省值
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetDecimal(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            获取双精度值，没有返回缺省值
            </summary>
        </member>
        <member name="M:Hongbin.Common.DictionaryExtension.GetDecimal(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.DateTime)">
            <summary>
            获取日期值，没有返回缺省值
            </summary>
        </member>
        <member name="T:Hongbin.Common.EncryptHelper">
            <summary>
            加/解密辅助类
            </summary>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Encrypt(System.String)">
            <summary>
            加密字符串（与Decrypt相逆）
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Encrypt(System.String,System.String)">
            <summary>
            加密字符串（与Decrypt相逆）
            </summary>
            <param name="original"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密字节数组（与Decrypt相逆）
            </summary>
            <param name="original"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Decrypt(System.String)">
            <summary>
            解密字符串（与Encrypt相逆）
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            解密字符串（与Encrypt相逆）
            </summary>
            <param name="encrypted"></param>
            <param name="key"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            加密字节数组（与Encrypt相逆）
            </summary>
            <param name="encrypted"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.MakeMD5(System.Byte[])">
            <summary>
            计算指定字节数组的哈希值
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.StringToHex(System.String)">
            <summary>
            获取字符串的16进制表示的串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.EncryptHelper.HexToString(System.String)">
            <summary>
            16进制串转换为字符串
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Common.GlbVar">
            <summary>
            全局变量静态类
            全局变量的生存周期与WEB控件的生命周期类似，即仅在一个回传期间
            todo: 会不会有线程安全问题呢?
            </summary>
        </member>
        <member name="P:Hongbin.Common.GlbVar.GetAppIdHandler">
            <summary>
            获取或设置应用程序标识的回调函数委托方法
            </summary>
        </member>
        <member name="P:Hongbin.Common.GlbVar.AppId">
            <summary>
            当前应用程序标识，对WEB应用程序而言是指SessionId 
            </summary>
        </member>
        <member name="P:Hongbin.Common.GlbVar.Vars">
            <summary>
            获取与当前AppId相关的变量表
            </summary>
        </member>
        <member name="M:Hongbin.Common.GlbVar.Clear">
            <summary>
            清除当前AppId的所有变量
            </summary>
        </member>
        <member name="M:Hongbin.Common.GlbVar.SetVar(System.String,System.Object)">
            <summary>
            设置变量值
            </summary>
        </member>
        <member name="M:Hongbin.Common.GlbVar.GetVar(System.String)">
            <summary>
            获取变量值
            </summary>
        </member>
        <member name="T:Hongbin.Common.GetAppIdHandler">
            <summary>
            获取应用程序标识的回调函数委托类
            </summary>
        </member>
        <member name="M:Hongbin.Common.Pinyin.GetSpellCode(System.String)">
            <summary>
            获取字符串的拼音首字母
            </summary>
        </member>
        <member name="F:Hongbin.Common.Pinyin.PinYinMapping">
            <summary>
            汉字拼音首字母映射表
            </summary>
        </member>
        <member name="M:Hongbin.Common.Pinyin.GetCharSpellCode(System.String)">
            <summary>
            得到一个汉字的拼音第一个字母，如果是一个英文字母则直接返回大写字母
            </summary>
            <param name="CnChar">单个汉字</param>
            <returns>单个大写字母</returns>
        </member>
        <member name="M:Hongbin.Common.SerializeObj.Serialize``1(``0)">
            <summary>
            序列化 对象到字符串
            </summary>
            <param name="obj">泛型对象</param>
            <returns>序列化后的字符串</returns>
        </member>
        <member name="M:Hongbin.Common.SerializeObj.Desrialize``1(System.String)">
            <summary>
            反序列化 字符串到对象
            </summary>
            <param name="str">要转换为对象的字符串</param>
            <returns>反序列化出来的对象</returns>
        </member>
        <member name="M:Hongbin.Common.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            动态增加查询条件，如：UserName==@0 || UserCode==@0，条件串中引用参数时以values的顺序编号
            </summary>
        </member>
        <member name="M:Hongbin.Common.DynamicQueryable.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            动态增加查询条件，如：UserName.ToUpper()==@0 || UserCode.ToLower()==@0，条件串中引用参数时以values的顺序编号
            </summary>
        </member>
        <member name="M:Hongbin.Common.DynamicQueryable.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            查询指定字段，selector格式：单个属性名|new(属性名1,属性名2...)
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.DynClassFactory.GetDynamicClass(System.Type,Hongbin.Common.DynamicProperty[])">
            <summary>
            动态创建指类的继承类
            </summary>
            <param name="Parent"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.Chars(System.String,System.Int32)">
            <summary>
            返回重复字符串
            </summary>
            <param name="c">重复串</param>
            <param name="len">重复次数</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToIntDef(System.String,System.Int32)">
            <summary>
            不报错的串转数值
            </summary>
            <param name="s">字符串</param>
            <param name="defvalue">缺省值</param>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToIntDef(System.String)">
            <summary>
            不报错的串转数值，失败返回null
            </summary>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToDateTime(System.String)">
            <summary>
            串转日期，失败返回null
            </summary>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ValidDateTime(System.Nullable{System.DateTime})">
            <summary>
            如果日期不正确返回null
            </summary>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToUnixTime(System.DateTime)">
            <summary>
            将日期转换为Unix时间，即距离1970年1月1日0点的毫秒数
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.FromUnixTime(System.DateTime,System.Double)">
            <summary>
            将Unix时间戳转换为DateTime类型时间
            </summary>
            <param name="d">double 型数字，即距离1970年1月1日0点的毫秒数</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.EncodeJScript(System.String)">
            <summary>
             字符串转换为符合javascript标准的字符串。 by nxf
            </summary>
            <param name="str">需转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.CopyTo(System.Object,System.Object)">
            <summary>
            对象属性拷贝(属性名匹配拷贝) , 浅拷贝
            </summary>
            <param name="souObj">源对象</param>
            <param name="tarObj">目标对象</param>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToDBValue(System.String,System.Int32)">
            <summary>
            转换字符串，使其符合数据库存储格式。 by nxf
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.ToDBValue(System.String)">
            <summary>
            转换字符串，使其符合数据库存储格式。 by nxf
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Hongbin.Common.CommonExtensions.CodeInc(System.String)">
            <summary>
            编码串加一。如果编码为空或编码尾部不是数字，返回编码串加01，否则返回尾部数值加一后形成的新编码。
            </summary>
            <param name="code">源编码串，为空返回01</param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Common.Tool.ErrorCollection">
            <summary>
            错误信息集合  by nxf
            </summary>
        </member>
        <member name="T:Hongbin.Common.Tool.ErrorInfo">
            <summary>
            错误信息，by nxf
            </summary>
        </member>
        <member name="P:Hongbin.Common.Tool.ErrorInfo.Level">
            <summary>
            错误等级
            </summary>
        </member>
        <member name="P:Hongbin.Common.Tool.ErrorInfo.ID">
            <summary>
            发生错误的对象ID，可能是任何东东
            </summary>
        </member>
        <member name="P:Hongbin.Common.Tool.ErrorInfo.ClassName">
            <summary>
            发生错误的类名
            </summary>
        </member>
        <member name="P:Hongbin.Common.Tool.ErrorInfo.Content">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Hongbin.Common.Tool.ErrorInfo.Tag">
            <summary>
            附带对象
            </summary>
        </member>
        <member name="T:Hongbin.Common.Tool.ErrorLevel">
            <summary>
            错误等级
            </summary>
        </member>
        <member name="T:Hongbin.Common.Tool.IErrorPublisher">
            <summary>
            by nxf 
            错误信息发布器接口
            客户端，服务端，及任何运行环境中，可分别实现这个接口，以各自不同方式处理错误。
            比如browser和winform程序对错误的发布具有明显差异。要分别实现。
            </summary>
        </member>
        <member name="T:Hongbin.Common.Tool.IErrorPublisherFactory">
            <summary>
            by nxf 
            错误信息发布接口构造工厂，构造IErrorPublisher。
            客戶端程序,服務端程序,或者workflow中,可以分別實現自己的構造器,構造不同的錯誤發布器
            表现层，服务层，可分别实现自己的构造器，构造不同错误发布器。
             IErrorPublisherFactory,此接口是为了应对同一环境中 有多种发布器(IErrorPublisher)，如：表现层可能有n中表现方式
            </summary>
        </member>
        <member name="P:Hongbin.Common.FileUtils.ConfigFilename">
            <summary>
            取配置文件名
            </summary>
        </member>
        <member name="P:Hongbin.Common.FileUtils.ConfigurationFolder">
            <summary>
            取配置文件夹
            </summary>
        </member>
        <member name="T:Hongbin.Common.ObjConverter">
            <summary>
            对象转换辅助类
            </summary>
        </member>
        <member name="M:Hongbin.Common.ObjConverter.ObjToXml(System.Object)">
            <summary>
            将对象转换为XML文档，对象类必须声明 [Serializable] 特性
            </summary>
            <param name="obj">具有 [Serializable] 特性的对象</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.ObjConverter.XmlToObj(System.String)">
            <summary>
            根据XML文档创建对象
            </summary>
            <param name="xmlText">必须是由ObjToXml生成的XML文档</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.ObjConverter.ObjToBytes(System.Object)">
            <summary>
            将对象转换为字节数组，对象类必须声明 [Serializable] 特性
            </summary>
            <param name="obj">具有 [Serializable] 特性的对象</param>
            <returns>返回字节数组</returns>
        </member>
        <member name="M:Hongbin.Common.ObjConverter.BytesToObj(System.Byte[])">
            <summary>
            根据字节数组创建对象
            </summary>
            <param name="bytes">必须是由ObjToBytes生成的字节数组</param>
            <returns>返回一个对象实例</returns>
        </member>
        <member name="M:Hongbin.Common.ObjConverter.ToTypeValue(System.Object,System.Type)">
            <summary>
            将值转换为指定类型的值，如果失败返回null
            </summary>
            <param name="value">原值</param>
            <param name="destType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.PhotoUtils.CompressImage(System.String,System.String,System.Int32)">
            <summary>
            压缩图片文件
            </summary>
            <param name="srcFile">原图文件</param>
            <param name="dstFile">压缩后保存为</param>
            <param name="rate">压缩比，百分比值1-100</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.PhotoUtils.CompressImage(System.IO.Stream,System.String,System.Int32)">
            <summary>
            压缩图片
            </summary>
            <param name="source">图片文件流</param>
            <param name="dstFile">压缩后保存为</param>
            <param name="rate">压缩比，百分比值1-100</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.PhotoUtils.IsPicture(System.String)">
            <summary>
            判断文件是不是图片
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Common.QRCode">
            <summary>
            二维码辅助函数
            </summary>
        </member>
        <member name="M:Hongbin.Common.QRCode.MakeQRCode(System.String)">
            <summary>
            将字符串生成二维码图片对象
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.QRCode.MakeQRCodeBase64(System.String)">
            <summary>
            将字符串生成二维码图片的base64字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.ToNameValueCollection(System.String)">
            <summary>
            将字符串分解为名字/值对清单，字符串每行的格式如：名称=值
            </summary>
        </member>
        <member name="M:Hongbin.Common.StrUtils.ToString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            将名字/值对清单转换为以换行分隔的字段串，字符串每行的格式如：名称=值
            </summary>
            <param name="nvc"></param>
            <param name="makeNameValueStr"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.GetBool(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            获取逻辑参数值
            </summary>
            <param name="nvc"></param>
            <param name="key"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.GetInt(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            获取数值参数值
            </summary>
            <param name="nvc"></param>
            <param name="key"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.GetBytes(System.String)">
            <summary>
            获取字符串的字节数组对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.SubstringB(System.String,System.Int32)">
            <summary>
            按字节截取字符串
            </summary>
            <param name="s"></param>
            <param name="length">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.GetWords(System.String)">
            <summary>
            提取字符串中的所有单词，字符串中单词是以空白字符分隔的。
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.StrNext(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            返回源串的下一个字长串，可指定长度、开始字符、结束字符
            </summary>
            <param name="src"></param>
            <param name="len"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.StrNext(System.String,System.Int32)">
            <summary>
            返回指定长度的源串下一个字符串，由A-Z组成
            </summary>
            <param name="src"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.StrUtils.StrNext(System.String)">
            <summary>
            获取指定字符串的下一个字符串，如传入AAA返回AAB. 结果串与源串行长，如果源串为空，刚返回长度为8的字符串。
            源串由A-Z字母组成
            </summary>
            <param name="src">源串由A-Z字母组成的字符串</param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Common.TypeHelper">
            <summary>
            关于类型的一些辅助方法
            </summary>
        </member>
        <member name="M:Hongbin.Common.TypeHelper.FindType(System.String)">
            <summary>
            按类型名称查找类型, 在当前应用程序域中查找
            </summary>
            <param name="fullTypeName">类型名称, 忽略大小写</param>
        </member>
        <member name="M:Hongbin.Common.TypeHelper.GetTypes``1">
            <summary>
            获取当前系统中的某一基类的所有派生类。
            注意：某些程序集的依赖不成功，它的类也访问不到。
            </summary>
            <typeparam name="T">基类</typeparam>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Common.Validate.Decode(System.String)">
            <summary>
            按HTML解码,与Encode互逆
            </summary>
        </member>
        <member name="M:Hongbin.Common.Validate.Encode(System.String)">
            <summary>
            按HTML加码, 需Decode解码
            </summary>
        </member>
        <member name="M:Hongbin.Common.Validate.IsHasCHZN(System.String)">
            <summary>
            是否有中文
            </summary>
        </member>
        <member name="M:Hongbin.Common.Validate.RegExp_DateTime">
            <summary>
            日期格式验证的正则表达式
            </summary>
        </member>
        <!-- 对于成员“T:Hongbin.Configuration.ConfigManager”忽略有格式错误的 XML 注释 -->
        <member name="F:Hongbin.Configuration.ConfigManager.Default">
            <summary>
            缺省配置, 即 web.config
            </summary>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.#ctor">
            <summary>
            实例化,使用缺省的配置文件
            </summary>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.#ctor(System.String)">
            <summary>
            实例化，指定配置文件名，如果文件不存在将自动创建
            </summary>
            <param name="exePath">配置文件名</param>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.SaveAs(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="filename">文件名</param>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.GetString(System.String,System.String,System.String)">
            <summary>
            取字符串值
            </summary>
            <param name="SecName">节名</param>
            <param name="Key">参数名</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.GetInt(System.String,System.String,System.Int32)">
            <summary>
            取整数值
            </summary>
            <param name="SecName">节名</param>
            <param name="Key">参数名</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.ReadParamList(System.String)">
            <summary>
            从配置文件中读参数表
            </summary>
            <param name="SecName">节名</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.SaveParam(System.String,System.String,System.String)">
            <summary>
            保存参数
            </summary>
            <param name="SecName">节名</param>
            <param name="Key">参数名</param>
            <param name="Value">参数值</param>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.SaveParam(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            保存参数表
            </summary>
            <param name="SecName">节名</param>
            <param name="ParamList">参数表</param>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.SaveObject(System.String,System.Object)">
            <summary>
            保存对象,可以是节处理器对象，也可以是具有 [Serializable] 特性的任意对象
            </summary>
            <param name="SecName">节名</param>
            <param name="obj">可以是节处理器对象，也可以是具有 [Serializable] 特性的任意对象</param>
        </member>
        <member name="M:Hongbin.Configuration.ConfigManager.ReadObject(System.String)">
            <summary>
            读取对象
            </summary>
            <param name="SecName">对象保存的节名</param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Configuration.ObjectDataConfigSection">
            <summary>
            对象保存节处理类
            </summary>
        </member>
        <member name="P:Hongbin.Configuration.ObjectDataConfigSection.Object">
            <summary>
            待保存或以前保存的对象
            </summary>
        </member>
        <member name="M:Hongbin.Configuration.ObjectDataConfigSection.ObjToXml(System.Object)">
            <summary>
            将对象转换为XML文档，对象类必须声明 [Serializable] 特性
            </summary>
            <param name="obj">具有 [Serializable] 特性的对象</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Configuration.ObjectDataConfigSection.XmlToObj(System.String)">
            <summary>
            根据XML文档创建对象
            </summary>
            <param name="xmlText">必须是由ObjToXml生成的XML文档</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonHelper.JsonDeserialize``1(System.String)">
            <summary>
            将指定的 JSON 字符串转换为 T 类型的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">要进行反序列化的 JSON 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonHelper.JsonDeserialize``1(System.IO.Stream)">
            <summary>
            将JSON数据流转换为 T 类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="InputStream">JSON数据流</param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonHelper.JsonToDictionary(System.String)">
            <summary>
            将指定的 JSON 字符串转换为 键/值 集合类型的对象。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonHelper.JsonSerialize(System.Object,System.Boolean)">
            <summary>
            将对象序列化为JSON字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonHelper.JsonFormat(System.String)">
            <summary>
            格式化JSON对象串
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Json.JsonResult">
            <summary>
            前台通过Ajax调用后台过程后的返回对象
            </summary>
        </member>
        <member name="P:Hongbin.Json.JsonResult.Succeed">
            <summary>
            标明是否成功
            </summary>
        </member>
        <member name="P:Hongbin.Json.JsonResult.Message">
            <summary>
            信息串
            </summary>
        </member>
        <member name="P:Hongbin.Json.JsonResult.ErrCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Hongbin.Json.JsonResult.Data">
            <summary>
            需返回前端的数据对象, JSON格式，数据或单对象
            </summary>
        </member>
        <member name="M:Hongbin.Json.JsonResult.Success(System.Object)">
            <summary>
            封装成功调用返回信息
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonResult.Success(System.String)">
            <summary>
            封装成功调用返回信息
            </summary>
        </member>
        <member name="M:Hongbin.Json.JsonResult.Success(System.Object,System.String)">
            <summary>
            封装成功调用返回信息
            </summary>
        </member>
        <member name="M:Hongbin.Json.JsonResult.Error(System.String)">
            <summary>
            封装错误信息
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.JsonResult.Error(System.String,System.String)">
            <summary>
            封装错误信息
            </summary>
            <param name="errCode"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Json.BdpJsonSerializer.Serialize(System.Object)">
            <summary>
            特别处理json格式的日期序列化
            </summary>
        </member>
        <member name="T:Hongbin.Json.DbDataRecordConverter">
            <summary>
            让DbDataRecord支持json序列化
            </summary>
        </member>
        <member name="T:Hongbin.Json.DataTableConverter">
            <summary>
            让DataTable支持json序列化
            </summary>
        </member>
        <member name="T:Hongbin.Protection.EvaluateLimitMode">
            <summary>
            软件评估期的限制方式，包括限制可用次数、可用天数、固定到期时间、限制某些功能
            </summary>
        </member>
        <member name="F:Hongbin.Protection.EvaluateLimitMode.elmUsableTimes">
            <summary>
            限制可用次数
            </summary>
        </member>
        <member name="F:Hongbin.Protection.EvaluateLimitMode.elmUsableDays">
            <summary>
            限制可用天数
            </summary>
        </member>
        <member name="F:Hongbin.Protection.EvaluateLimitMode.elmExpireDate">
            <summary>
            固定到期时间
            </summary>
        </member>
        <member name="F:Hongbin.Protection.EvaluateLimitMode.elmFunctions">
            <summary>
            限制某些功能
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.AppData">
            <summary>
            应用数据，应用程序使用的数据
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.BuySite">
            <summary>
            注册网站(共享软件注册中心之类的网站地址)
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.CopyRight">
            <summary>
            版权声明
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.CorpName">
            <summary>
            用户的企业（单位）名称
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.Desc">
            <summary>
            软件说明
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.EvaluateLimitModes">
            <summary>
            试用／评估期限制方式集
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.ExpireDate">
            <summary>
            固定的到期时间
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.ExpiredSoonValue">
            <summary>
            临近到期提示值，当剩余使用次数／天数小于这个值的时侯就提示，语言相关
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.FileVer">
            <summary>
            文件版本
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.InitFlag">
            <summary>
            初始标志，用来标识是不是第一次运行
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.LastRunDate">
            <summary>
            最后一次运行时间
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.MailAddress">
            <summary>
            作者邮箱地址，软件发布时填写，用户注册时使用，应该允许用户修改
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.MsgDisFunc">
            <summary>
            提示信息（功能受限）
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.MsgExpired">
            <summary>
            提示信息（已过期）
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.MsgExpiredSooner">
            <summary>
            提示信息（即将过期）
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.MsgNotRegister">
            <summary>
            提示信息（尚未注册）
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.ProductCode">
            <summary>
            软件产品代号，区分不同软件或同一软件不同版本的唯一标志.
            软件升级时，应该发布标准版和升级版，标准版使用不同的产品标志，升级版使用老版本的产品标志
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.RegSn">
            <summary>
            序列号(注册码)
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.SoftName">
            <summary>
            软件名称
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.UsableDays">
            <summary>
            剩余可用天数
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.UsableTimes">
            <summary>
            剩余可用次数
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.UserName">
            <summary>
            注册用户名
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.VirtualMachineID">
            <summary>
            虚拟机器码，如果设置了此项。则不要求客户发送自己的用户名和机器码
            </summary>
        </member>
        <member name="P:Hongbin.Protection.SoftInfo.WinRegKey">
            <summary>
            注册表目录
            </summary>
        </member>
        <member name="M:Hongbin.Protection.SoftInfo.IsRegistered">
            <summary>
            检查是否已经注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Protection.SoftInfo.GetSerialNo(System.String,System.String)">
            <summary>
            根据用户名和机器码生成注册码
            </summary>
            <param name="UserName"></param>
            <param name="MachineId"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Protection.SoftInfo.GetMachineId">
            <summary>
            取机器码,首先取CPUID,如果没有CPUID则取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Protection.SoftInfo.GetCpuID">
            <summary>
            取CPU编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Protection.SoftInfo.GetHardDiskID">
            <summary>
            取第一块硬盘编号
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Script.ScriptEvaluator">
            <summary>
            脚本运算器
            </summary>
        </member>
        <member name="P:Hongbin.Script.ScriptEvaluator.Result">
            <summary>
            最后一次调用Evaluate的计算结果
            </summary>
        </member>
        <member name="P:Hongbin.Script.ScriptEvaluator.ErrorMessage">
            <summary>
            最后一次计算后的错误信息，如果没有发生错误则为空
            </summary>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.#ctor">
            <summary>
            初始化ScriptEvaluator
            </summary>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.Evaluate(System.String)">
            <summary>
            计算脚本表达式，返回是否成功. 如果成功可通过Result读取结果值
            </summary>
            <param name="Script"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.Evaluate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             计算脚本表达式，返回是否成功. 如果成功可通过Result读取结果值
            </summary>
            <param name="Script"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.SetVariable(System.String,System.Object)">
            <summary>
            在脚本运行环境中设置变量
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.SetVariable(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在脚本运行环境中设置变量
            </summary>
            <param name="Variables"></param>
        </member>
        <member name="M:Hongbin.Script.ScriptEvaluator.DefineGlbVar">
            <summary>
            定义全局变量，缺省地，GlbVar中与当前应用程序相关的所有变量均可在表达式中使用，其变量名为: "GlbVar."加GlbVar中的变量名称.
            et: 
                GlbVar.UserId 代表当前登录用户ID，
                GlbVar.CompanyId 当前登录用户所在单位ID,
                GlbVar.DepartmentId 当前登录用户所在部门ID
                ...
            </summary>
        </member>
        <member name="T:Hongbin.Script.IBDLScriptObj">
            <summary>
            接口：脚本对象，脚本解析后的对象
            </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptObj.Execute">
            <summary> 执行 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptObj.Evaluate">
            <summary> 求值运算 </summary>
        </member>
        <member name="T:Hongbin.Script.IBDLScriptProcessor">
            <summary>
            接口：脚本处理器，用于解析、执行脚本
            </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.GetScriptType(System.String)">
            <summary> 检测脚本的源类型，如果脚本是处理器不能支持的，则返回源类型，否则返回空串 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.Init">
            <summary> 初始化脚本处理器 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.SetVar(System.String,System.Double)">
            <summary> 在脚本运行环境中设置变量 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.SetVar(System.String,System.String)">
            <summary> 在脚本运行环境中设置变量 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.SetVar(System.String,System.Object)">
            <summary> 在脚本运行环境中设置变量 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.RemoveVar(System.String)">
            <summary>
            从脚本运行环境中移除变量
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.Parse(System.String)">
            <summary>
            解析脚本，返回解析后的脚本对象，如果失败则返回 nil/null
            如果脚本需要多次执行/运算，应用程序则应先调用此方法解析脚本，然后调用脚本对象的 Execute/Evaluate
            </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.Execute(System.String)">
            <summary> 直接执行脚本你，如果解析脚本出错，则抛出异常 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.Evaluate(System.String)">
            <summary>
            直接对脚本进行运算求值，此方法返回的脚本对象不必释放，直接用AsXxxx获得结果即可。形如：
            ExpScriptProcessor.Evaluate('ExpText').AsString
            如果解析脚本出错，则抛出异常
             </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.GetErrorMessage">
            <summary> 获取最近一次解析／执行脚本的错误信息，如果没有出错返回空 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptProcessor.GetItems">
            <summary>
            取处理器当前运行环境项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hongbin.Script.IBDLScriptManager">
            <summary>
            接口：脚本管理器
            </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptManager.RegisterScriptProcessor(System.String,System.String,System.String)">
            <summary> 在脚本管理器中注册一个脚本处理器 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptManager.GetProcessorByScript(System.String)">
            <summary> 根据脚本内容获取脚本处理器，脚本中应包含有能被特定脚本处理器识别的源类型标识，
            如果不能检测出源的类型，则使用缺省的脚本处理器 </summary>
        </member>
        <member name="M:Hongbin.Script.IBDLScriptManager.GetProcessorByType(System.String)">
            <summary> 根据脚本类型获取脚本处理器 </summary>
        </member>
        <member name="P:Hongbin.Script.IBDLScriptManager.DefaultProcessor">
            <summary> 默认脚本处理器 </summary>
        </member>
        <member name="T:Hongbin.Script.BDLScriptProcessorInfo">
            <summary>
            脚本处理器描述信息
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptProcessorInfo.ScriptSign">
            <summary>
            脚本标志
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptProcessorInfo.ScriptClass">
            <summary>
            脚本实现类名
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptProcessorInfo.ScriptAssembly">
            <summary>
            脚本实现程序集
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptProcessorInfo.ProcessorType">
            <summary>
            处理器类
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptProcessorInfo.ScriptProcessor">
            <summary>
            脚本处理器, 只读
            </summary>
        </member>
        <member name="M:Hongbin.Script.BDLScriptProcessorInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化ScriptProcessorInfo类
            </summary>
            <param name="Sign">脚本处理器类型标志</param>
            <param name="AssemblyName">程序集</param>
            <param name="AClassName">类名</param>
        </member>
        <member name="T:Hongbin.Script.BDLScriptManager">
            <summary>
            脚本管理器
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptManager.Instance">
            <summary>
            脚本管理器缺省实例, 在应用程序初始化时至少应该调用Instance.RegisterScriptProcessor注册一个脚本处理器类
            </summary>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.CreateScriptProcessor">
            <summary>
            创建缺省类型的脚本处理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.CreateScriptProcessor(System.String)">
            <summary>
            创建指定类型的脚本处理器
            </summary>
            <param name="scriptSign">脚本标识，如Ruby,空表示缺省</param>
        </member>
        <member name="P:Hongbin.Script.BDLScriptManager.PubEvaluator">
            <summary>
            与当前应用程序相关的全局表达式计算器
            </summary>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.ExpAsString(System.String)">
            <summary>
            计算表达式并返回结果
            </summary>
            <param name="expText"></param>
            <returns></returns>
        </member>
        <member name="P:Hongbin.Script.BDLScriptManager.ScriptProcessors">
            <summary>
            当前系统注册的所有脚本处理器清单
            </summary>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.RegisterScriptProcessor(System.String,System.String,System.String)">
            <summary>
            在脚本管理器中注册一个脚本处理器 
            </summary>
            <param name="SourceType">处理器类型，空表示缺省处理器</param>
            <param name="AssemblyName">程序集名称，全路径</param>
            <param name="ClassName">类名</param>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.RegisterScriptProcessor(System.String,System.Type)">
            <summary>
            在脚本管理器中注册一个脚本处理器
            </summary>
            <param name="SourceType">处理器类型，空表示缺省处理器</param>
            <param name="ProcessorType">处理器类，需实现IScriptProcessor接口</param>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.RegisterScriptProcessor``1(System.String)">
            <summary>
            在脚本管理器中注册一个脚本处理器
            </summary>
            <typeparam name="T">处理器类，需实现IScriptProcessor接口</typeparam>
            <param name="SourceType">处理器类型，空表示缺省处理器</param>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.GetProcessorByScript(System.String)">
            <summary> 
            根据脚本内容获取脚本处理器，脚本中应包含有能被特定脚本处理器识别的源类型标识，
            如果不能检测出源的类型，则使用缺省的脚本处理器 
            </summary>
        </member>
        <member name="M:Hongbin.Script.BDLScriptManager.GetProcessorByType(System.String)">
            <summary> 
            根据脚本类型获取脚本处理器 
            </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptManager.DefaultProcessor">
            <summary> 默认脚本处理器 </summary>
        </member>
        <member name="P:Hongbin.Script.BDLScriptManager.DefaultEvaluator">
            <summary>
            与当前应用程序相关的全局表达式计算器
            </summary>
        </member>
        <member name="M:Hongbin.Script.StrExtender.ExpandExpression(System.String)">
            <summary>
            计算并替换字符串中的所有表达式
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Hongbin.Script.StrExtender.Calculate(System.String,System.Boolean)">
            <summary>
            将字符当作表达式进行计算并返回结果。
            </summary>
            <param name="src"></param>
            <param name="throwOnError">表达式错误时是否抛出异常</param>
            <returns></returns>
        </member>
    </members>
</doc>
